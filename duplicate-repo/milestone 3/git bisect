## Debugging with Git Bisect

### What does `git bisect` do?
`git bisect` helps you find out which specific commit introduced a bug. Instead of checking each commit manually, it uses a method called binary search. It checks out different commits and asks you to say whether each one is "good" or "bad", and keeps narrowing down the search until it finds the exact commit that caused the problem.

### When would you use it in a real-world debugging situation?
You would use `git bisect` when a bug appears in your project, but you're not sure when it started. For example, if your code was working last week and now it's broken, you can use `git bisect` to figure out which commit between then and now introduced the bug. It’s really useful when there are lots of commits, and it would take too long to check them one by one.

### How does it compare to manually reviewing commits?
Manually reviewing each commit can be very slow, especially in large projects. `git bisect` is much faster because it only asks you to check a few commits (usually 4–5). It automates the process and saves time by helping you find the broken commit more quickly and easily.
